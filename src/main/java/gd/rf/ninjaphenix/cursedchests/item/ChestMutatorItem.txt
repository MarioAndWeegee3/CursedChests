package gd.rf.ninjaphenix.cursedchests.item;
import gd.rf.ninjaphenix.cursedchests.api.block.CursedChestBlock;
import gd.rf.ninjaphenix.cursedchests.api.item.ChestModifier;
import net.minecraft.block.Block;
import net.minecraft.block.BlockState;
import net.minecraft.block.Blocks;
import net.minecraft.enchantment.Enchantments;
import net.minecraft.entity.player.PlayerEntity;
import net.minecraft.item.Item;
import net.minecraft.item.ItemGroup;
import net.minecraft.item.ItemStack;
import net.minecraft.nbt.CompoundTag;
import net.minecraft.network.chat.TextComponent;
import net.minecraft.util.ActionResult;
import net.minecraft.util.Hand;
import net.minecraft.util.TypedActionResult;
import net.minecraft.util.hit.BlockHitResult;
import net.minecraft.util.math.BlockPos;
import net.minecraft.world.World;

public class ChestMutatorItem extends Item implements ChestModifier
{
	private byte mode;
	public ChestMutatorItem()
	{
		super(new Item.Settings().stackSize(1).itemGroup(ItemGroup.TOOLS));
		mode = 0;
	}

	public ActionResult useOnChest(World world, PlayerEntity player, Hand hand, BlockHitResult blockHitResult, BlockPos mainBlockPos, BlockPos otherBlockPos)
	{
		if(!world.isClient)
		{
			player.sendMessage(new TextComponent("Item used on chest."));
		}

		return ActionResult.PASS;
	}

	@Override public boolean isEffectiveOn(BlockState state)
	{
		Block block = state.getBlock();
		return block instanceof CursedChestBlock || block == Blocks.CHEST || block == Blocks.TRAPPED_CHEST || block == Blocks.ENDER_CHEST;
	}

	@Override public float getBlockBreakingSpeed(ItemStack stack, BlockState state)
	{
		return isEffectiveOn(state) ? 50 : 0;
	}

	@Override public ItemStack getDefaultStack()
	{
		ItemStack stack = super.getDefaultStack();
		stack.addEnchantment(Enchantments.SILK_TOUCH, 1);
		return stack;
	}

	@Override public TypedActionResult<ItemStack> use(World world, PlayerEntity player, Hand hand)
	{
		if (!world.isClient && player.isSneaking())
		{
			player.sendMessage(new TextComponent("Item used."));
			return new TypedActionResult<>(ActionResult.SUCCESS, player.getStackInHand(hand));
		}

		return super.use(world, player, hand);
	}

	@Override public boolean onTagDeserialized(CompoundTag tag)
	{
		if (tag.containsKey("mode"))
		{
			mode = tag.getByte("mode");
			return true;
		}
		return super.onTagDeserialized(tag);
	}
}
